/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DeLetterBaseInterface extends utils.Interface {
  functions: {
    "_addressList(address)": FunctionFragment;
    "setArweaveAddress(string)": FunctionFragment;
    "updateArweaveAddress(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_addressList"
      | "setArweaveAddress"
      | "updateArweaveAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_addressList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setArweaveAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateArweaveAddress",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_addressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArweaveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateArweaveAddress",
    data: BytesLike
  ): Result;

  events: {
    "ArweaveAddressSet(address,string)": EventFragment;
    "ArweaveAddressUpdated(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArweaveAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArweaveAddressUpdated"): EventFragment;
}

export interface ArweaveAddressSetEventObject {
  owner: string;
  arweaveAddress: string;
}
export type ArweaveAddressSetEvent = TypedEvent<
  [string, string],
  ArweaveAddressSetEventObject
>;

export type ArweaveAddressSetEventFilter =
  TypedEventFilter<ArweaveAddressSetEvent>;

export interface ArweaveAddressUpdatedEventObject {
  owner: string;
  arweaveAddress: string;
}
export type ArweaveAddressUpdatedEvent = TypedEvent<
  [string, string],
  ArweaveAddressUpdatedEventObject
>;

export type ArweaveAddressUpdatedEventFilter =
  TypedEventFilter<ArweaveAddressUpdatedEvent>;

export interface DeLetterBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeLetterBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _addressList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { owner: string; arweaveAddress: string }>;

    setArweaveAddress(
      _arweaveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateArweaveAddress(
      _arweaveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _addressList(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { owner: string; arweaveAddress: string }>;

  setArweaveAddress(
    _arweaveAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateArweaveAddress(
    _arweaveAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _addressList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { owner: string; arweaveAddress: string }>;

    setArweaveAddress(
      _arweaveAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateArweaveAddress(
      _arweaveAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ArweaveAddressSet(address,string)"(
      owner?: PromiseOrValue<string> | null,
      arweaveAddress?: null
    ): ArweaveAddressSetEventFilter;
    ArweaveAddressSet(
      owner?: PromiseOrValue<string> | null,
      arweaveAddress?: null
    ): ArweaveAddressSetEventFilter;

    "ArweaveAddressUpdated(address,string)"(
      owner?: PromiseOrValue<string> | null,
      arweaveAddress?: null
    ): ArweaveAddressUpdatedEventFilter;
    ArweaveAddressUpdated(
      owner?: PromiseOrValue<string> | null,
      arweaveAddress?: null
    ): ArweaveAddressUpdatedEventFilter;
  };

  estimateGas: {
    _addressList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setArweaveAddress(
      _arweaveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateArweaveAddress(
      _arweaveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _addressList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setArweaveAddress(
      _arweaveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateArweaveAddress(
      _arweaveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
